name: Build alpine-tomcat Docker image
env:
  IMAGE_BASE: docker.io/kanstin/alpine-tomcat

on:
  workflow_dispatch:
    inputs:
      tomcat_version:
        description: "The version of Tomcat to include in the image."
        required: true
        type: string
        default: "9.0.104"

  workflow_call:
    inputs:
      tomcat_version:
        description: "The version of Tomcat to include in the image."
        required: true
        type: string

jobs:
  build-push-amd64:
    runs-on: ubuntu-24.04
    env:
      needToPush: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up tags
        id: tags
        run: |
          echo "LATEST_TAG=${{ env.IMAGE_BASE }}:latest" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=${{ env.IMAGE_BASE }}:${{ inputs.tomcat_version }}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:alpine-tomcat"
          push: ${{ env.needToPush }}
          build-args: |
            TOMCAT_VERSION=${{ inputs.tomcat_version }}
          tags: |
            ${{ steps.tags.outputs.LATEST_TAG }}-amd64
            ${{ steps.tags.outputs.VERSION_TAG }}-amd64
          provenance: mode=max
          sbom: true

  build-push-arm64:
    runs-on: ubuntu-24.04-arm
    env:
      needToPush: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up tags
        id: tags
        run: |
          echo "LATEST_TAG=${{ env.IMAGE_BASE }}:latest" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=${{ env.IMAGE_BASE }}:${{ inputs.tomcat_version }}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:alpine-tomcat"
          push: ${{ env.needToPush }}
          build-args: |
            TOMCAT_VERSION=${{ inputs.tomcat_version }}
          tags: |
            ${{ steps.tags.outputs.LATEST_TAG }}-arm64
            ${{ steps.tags.outputs.VERSION_TAG }}-arm64
          provenance: mode=max
          sbom: true

  create-push-manifests:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    needs: [build-push-arm64, build-push-amd64]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up tags
        id: tags
        run: |
          echo "LATEST_TAG=${{ env.IMAGE_BASE }}:latest" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=${{ env.IMAGE_BASE }}:${{ inputs.tomcat_version }}" >> $GITHUB_OUTPUT

      - name: Get arm64 digest
        id: arm64-digest
        run: |
          digest=$(docker manifest inspect ${{ steps.tags.outputs.LATEST_TAG }}-arm64 | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
          echo "digest=$digest" >> $GITHUB_OUTPUT

      - name: Get amd64 digest
        id: amd64-digest
        run: |
          digest=$(docker manifest inspect ${{ steps.tags.outputs.LATEST_TAG }}-amd64 | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
          echo "digest=$digest" >> $GITHUB_OUTPUT

      - name: Create and push latest manifest
        run: |
          docker manifest create ${{ steps.tags.outputs.LATEST_TAG }} \
            ${{ env.IMAGE_BASE }}@${{ steps.arm64-digest.outputs.digest }} \
            ${{ env.IMAGE_BASE }}@${{ steps.amd64-digest.outputs.digest }}
          docker manifest push -p ${{ steps.tags.outputs.LATEST_TAG }}

      - name: Create and push version manifest
        run: |
          docker manifest create ${{ steps.tags.outputs.VERSION_TAG }} \
            ${{ env.IMAGE_BASE }}@${{ steps.arm64-digest.outputs.digest }} \
            ${{ env.IMAGE_BASE }}@${{ steps.amd64-digest.outputs.digest }}
          docker manifest push -p ${{ steps.tags.outputs.VERSION_TAG }}

