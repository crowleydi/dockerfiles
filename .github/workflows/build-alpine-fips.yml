name: Build alpine-fips Docker image
env:
  IMAGE_BASE: docker.io/kanstin/alpine-fips
  BASE_VERSION: 3.22

on:
  workflow_dispatch:
    inputs:
      do_publish:
        description: "Publish image after build?"
        required: true
        type: boolean
        default: false
  push:
    branches: [ "main" ]
    paths:
      - "alpine-fips/Dockerfile"

  pull_request:
    branches: [ "main" ]
    paths:
      - "alpine-fips/Dockerfile"

jobs:
  build-push-amd64:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
      attestations: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Set up tags
        id: tags
        run: |
          echo "LATEST_TAG=${{ env.IMAGE_BASE }}:latest" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=${{ env.IMAGE_BASE }}:${{ env.BASE_VERSION }}" >> $GITHUB_OUTPUT

      - name: Build and push
        id: build-push-amd64
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:alpine-fips"
          build-args: |
            BASE_VERSION=${{ env.BASE_VERSION }}
          push: |
            ${{ github.event_name == 'workflow_dispatch' && inputs.do_publish == true
             || github.ref == 'refs/heads/main' }}
          tags: |
            ${{ steps.tags.outputs.LATEST_TAG }}-amd64
            ${{ steps.tags.outputs.VERSION_TAG }}-amd64
          # Improved cache configuration
          cache-from: |
            type=gha,scope=alpine-fips-amd64-${{ env.BASE_VERSION }}
            type=registry,ref=${{ steps.tags.outputs.LATEST_TAG }}-amd64
          cache-to: |
            type=gha,mode=max,scope=alpine-fips-amd64-${{ env.BASE_VERSION }},ignore-error=true
          provenance: mode=max
          sbom: true

      - name: Attest AMD64 image
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.do_publish == true || github.ref == 'refs/heads/main' }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.tags.outputs.LATEST_TAG }}-amd64
          subject-digest: ${{ steps.build-push-amd64.outputs.digest }}
          push-to-registry: true

  build-push-arm64:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      id-token: write
      attestations: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Set up tags
        id: tags
        run: |
          echo "LATEST_TAG=${{ env.IMAGE_BASE }}:latest" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=${{ env.IMAGE_BASE }}:${{ env.BASE_VERSION }}" >> $GITHUB_OUTPUT

      - name: Build and push
        id: build-push-arm64
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:alpine-fips"
          build-args: |
            BASE_VERSION=${{ env.BASE_VERSION }}
          push: |
            ${{ github.event_name == 'workflow_dispatch' && inputs.do_publish == true
             || github.ref == 'refs/heads/main' }}
          tags: |
            ${{ steps.tags.outputs.LATEST_TAG }}-arm64
            ${{ steps.tags.outputs.VERSION_TAG }}-arm64
          # Improved cache configuration
          cache-from: |
            type=gha,scope=alpine-fips-arm64-${{ env.BASE_VERSION }}
            type=registry,ref=${{ steps.tags.outputs.LATEST_TAG }}-arm64
          cache-to: |
            type=gha,mode=max,scope=alpine-fips-arm64-${{ env.BASE_VERSION }},ignore-error=true
          provenance: mode=max
          sbom: true

      - name: Attest ARM64 image
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.do_publish == true || github.ref == 'refs/heads/main' }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.tags.outputs.LATEST_TAG }}-arm64
          subject-digest: ${{ steps.build-push-arm64.outputs.digest }}
          push-to-registry: true

  create-push-manifests:
    if: github.event_name == 'workflow_dispatch' && inputs.do_publish == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    needs: [build-push-arm64, build-push-amd64]
    permissions:
      contents: read
      id-token: write
      attestations: write
      packages: write
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up tags
        id: tags
        run: |
          echo "LATEST_TAG=${{ env.IMAGE_BASE }}:latest" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=${{ env.IMAGE_BASE }}:${{ env.BASE_VERSION }}" >> $GITHUB_OUTPUT

      - name: Get arm64 digest
        id: arm64-digest
        run: |
          digest=$(docker manifest inspect ${{ steps.tags.outputs.LATEST_TAG }}-arm64 | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
          echo "digest=$digest" >> $GITHUB_OUTPUT

      - name: Get amd64 digest
        id: amd64-digest
        run: |
          digest=$(docker manifest inspect ${{ steps.tags.outputs.LATEST_TAG }}-amd64 | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
          echo "digest=$digest" >> $GITHUB_OUTPUT

      - name: Create and push latest manifest
        run: |
          docker manifest create ${{ steps.tags.outputs.LATEST_TAG }} \
            ${{ env.IMAGE_BASE }}@${{ steps.arm64-digest.outputs.digest }} \
            ${{ env.IMAGE_BASE }}@${{ steps.amd64-digest.outputs.digest }}
          docker manifest push -p ${{ steps.tags.outputs.LATEST_TAG }}

      - name: Create and push version manifest
        run: |
          docker manifest create ${{ steps.tags.outputs.VERSION_TAG }} \
            ${{ env.IMAGE_BASE }}@${{ steps.arm64-digest.outputs.digest }} \
            ${{ env.IMAGE_BASE }}@${{ steps.amd64-digest.outputs.digest }}
          docker manifest push -p ${{ steps.tags.outputs.VERSION_TAG }}

      - name: Attest latest manifest
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.tags.outputs.LATEST_TAG }}
          subject-digest: sha256:$(docker manifest inspect ${{ steps.tags.outputs.LATEST_TAG }} | jq -r '.config.digest' | sed 's/sha256://g')
          push-to-registry: true

      - name: Attest version manifest
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.tags.outputs.VERSION_TAG }}
          subject-digest: sha256:$(docker manifest inspect ${{ steps.tags.outputs.VERSION_TAG }} | jq -r '.config.digest' | sed 's/sha256://g')
          push-to-registry: true
