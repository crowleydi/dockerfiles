name: Build alpine-fips Docker image
env:
  IMAGE_BASE: docker.io/kanstin/alpine-fips
  IMAGE_TAG: ${{ env.IMAGE_BASE }}:latest
  IMAGE_VER: ${{ env.IMAGE_BASE }}:3.21

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "alpine-fips/Dockerfile"

  pull_request:
    branches: [ "main" ]
    paths:
      - "alpine-fips/Dockerfile"

jobs:
  build-push-amd64:
    runs-on: ubuntu-24.04
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:alpine-fips"
          push: true
          tags: |
            ${{ env.IMAGE_TAG }}-amd64
            ${{ env.IMAGE_VER }}-amd64

  build-push-arm64:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:alpine-fips"
          push: true
          tags: |
            ${{ env.IMAGE_TAG }}-arm64
            ${{ env.IMAGE_VER }}-arm64

  create-push-manifests:
    runs-on: ubuntu-24.04
    needs: [build-push-arm64, build-push-amd64]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Create latest manifest and push
        run: |
          arm64sha=$(docker manifest inspect ${{ env.IMAGE_TAG }}-arm64 \
            | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
          amd64sha=$(docker manifest inspect ${{ env.IMAGE_TAG }}-amd64 \
            | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
          docker manifest create ${{ env.IMAGE_TAG }} \
            ${{ env.IMAGE_BASE }}@$arm64sha \
            ${{ env.IMAGE_BASE }}@$amd64sha
          docker manifest push -p ${{ env.IMAGE_TAG }}

      - name: Create VER manifest and push
        run: |
          arm64sha=$(docker manifest inspect ${{ env.IMAGE_VER }}-arm64 \
            | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
          amd64sha=$(docker manifest inspect ${{ env.IMAGE_VER }}-amd64 \
            | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
          docker manifest create ${{ env.IMAGE_VER }} \
            ${{ env.IMAGE_BASE }}@$arm64sha \
            ${{ env.IMAGE_BASE }}@$amd64sha
          docker manifest push -p ${{ env.IMAGE_VER }}

